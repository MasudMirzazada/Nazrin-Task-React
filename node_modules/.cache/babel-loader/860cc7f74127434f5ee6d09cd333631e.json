{"ast":null,"code":"import config from \"./config.json\";\n\nconst save = async request => {\n  const response = await fetch(\"http://localhost:3000/favorite\", {\n    method: \"POST\",\n    body: JSON.stringify(request),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  if (response.ok) {\n    return await response.json();\n  }\n\n  throw new Error(await response.text());\n};\n\nconst get = async id => {\n  const url = new URL(id, \"http://localhost:3000/favorite/\");\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(\"You dont have any favourite films!\");\n  }\n\n  return await response.json();\n};\n\nconst getFilms = async searchString => {\n  const url = new URL(config.apiUrl);\n  url.searchParams.set(\"s\", searchString);\n  url.searchParams.set(\"apikey\", config.apiKey);\n  const response = await fetch(url.toString()).then(r => r.json());\n\n  if (response.Error) {\n    throw new Error(response.Error);\n  }\n\n  return response;\n};\n\nconst api = {\n  save,\n  get,\n  getFilms\n};\nexport default api;","map":{"version":3,"names":["config","save","request","response","fetch","method","body","JSON","stringify","headers","ok","json","Error","text","get","id","url","URL","getFilms","searchString","apiUrl","searchParams","set","apiKey","toString","then","r","api"],"sources":["C:/Users/HP/Desktop/movie-organizer/movie_organizer/src/api.js"],"sourcesContent":["import config from \"./config.json\";\r\nconst save = async (request) => {\r\n  const response = await fetch(\"http://localhost:3000/favorite\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(request),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    return await response.json();\r\n  }\r\n  throw new Error(await response.text());\r\n};\r\n\r\nconst get = async (id) => {\r\n  const url = new URL(id, \"http://localhost:3000/favorite/\");\r\n  const response = await fetch(url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"You dont have any favourite films!\");\r\n  }\r\n  return await response.json();\r\n};\r\n\r\nconst getFilms = async (searchString) => {\r\n  const url = new URL(config.apiUrl);\r\n  url.searchParams.set(\"s\", searchString);\r\n  url.searchParams.set(\"apikey\", config.apiKey);\r\n\r\n  const response = await fetch(url.toString()).then((r) => r.json());\r\n\r\n  if (response.Error) {\r\n    throw new Error(response.Error);\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nconst api = { save, get, getFilms };\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;;AACA,MAAMC,IAAI,GAAG,MAAOC,OAAP,IAAmB;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;IAC7DC,MAAM,EAAE,MADqD;IAE7DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFuD;IAG7DO,OAAO,EAAE;MACP,gBAAgB;IADT;EAHoD,CAAnC,CAA5B;;EAQA,IAAIN,QAAQ,CAACO,EAAb,EAAiB;IACf,OAAO,MAAMP,QAAQ,CAACQ,IAAT,EAAb;EACD;;EACD,MAAM,IAAIC,KAAJ,CAAU,MAAMT,QAAQ,CAACU,IAAT,EAAhB,CAAN;AACD,CAbD;;AAeA,MAAMC,GAAG,GAAG,MAAOC,EAAP,IAAc;EACxB,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQF,EAAR,EAAY,iCAAZ,CAAZ;EACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACY,GAAD,CAA5B;;EAEA,IAAI,CAACb,QAAQ,CAACO,EAAd,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;EACD;;EACD,OAAO,MAAMT,QAAQ,CAACQ,IAAT,EAAb;AACD,CARD;;AAUA,MAAMO,QAAQ,GAAG,MAAOC,YAAP,IAAwB;EACvC,MAAMH,GAAG,GAAG,IAAIC,GAAJ,CAAQjB,MAAM,CAACoB,MAAf,CAAZ;EACAJ,GAAG,CAACK,YAAJ,CAAiBC,GAAjB,CAAqB,GAArB,EAA0BH,YAA1B;EACAH,GAAG,CAACK,YAAJ,CAAiBC,GAAjB,CAAqB,QAArB,EAA+BtB,MAAM,CAACuB,MAAtC;EAEA,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAACY,GAAG,CAACQ,QAAJ,EAAD,CAAL,CAAsBC,IAAtB,CAA4BC,CAAD,IAAOA,CAAC,CAACf,IAAF,EAAlC,CAAvB;;EAEA,IAAIR,QAAQ,CAACS,KAAb,EAAoB;IAClB,MAAM,IAAIA,KAAJ,CAAUT,QAAQ,CAACS,KAAnB,CAAN;EACD;;EAED,OAAOT,QAAP;AACD,CAZD;;AAcA,MAAMwB,GAAG,GAAG;EAAE1B,IAAF;EAAQa,GAAR;EAAaI;AAAb,CAAZ;AACA,eAAeS,GAAf"},"metadata":{},"sourceType":"module"}